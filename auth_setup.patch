diff --git a/booking/pom.xml b/booking/pom.xml
index 8a1ece4..0674aa9 100644
--- a/booking/pom.xml
+++ b/booking/pom.xml
@@ -53,10 +53,24 @@
 			<scope>provided</scope>
 		</dependency>
 
-
-
-
-
+		<dependency>
+			<groupId>org.springframework.boot</groupId>
+			<artifactId>spring-boot-starter-oauth2-resource-server</artifactId>
+		</dependency>
+		<dependency>
+			<groupId>org.springframework.boot</groupId>
+			<artifactId>spring-boot-starter-security</artifactId>
+		</dependency>
+		<dependency>
+			<groupId>org.springframework.security</groupId>
+			<artifactId>spring-security-jwt</artifactId>
+			<version>1.0.10.RELEASE</version>
+		</dependency>
+		<dependency>
+			<groupId>org.springframework.security.oauth</groupId>
+			<artifactId>spring-security-oauth2</artifactId>
+			<version>2.3.5.RELEASE</version>
+		</dependency>
 	</dependencies>
 
 	<build>
diff --git a/booking/src/main/java/hu/flow/booking/config/AuthConfig.java b/booking/src/main/java/hu/flow/booking/config/AuthConfig.java
new file mode 100644
index 0000000..27cc82d
--- /dev/null
+++ b/booking/src/main/java/hu/flow/booking/config/AuthConfig.java
@@ -0,0 +1,78 @@
+package hu.flow.booking.config;
+
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.beans.factory.annotation.Qualifier;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.context.annotation.Primary;
+import org.springframework.security.authentication.AuthenticationManager;
+import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
+import org.springframework.security.oauth2.config.annotation.configurers.ClientDetailsServiceConfigurer;
+import org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerConfigurerAdapter;
+import org.springframework.security.oauth2.config.annotation.web.configuration.EnableAuthorizationServer;
+import org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerEndpointsConfigurer;
+import org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerSecurityConfigurer;
+import org.springframework.security.oauth2.provider.token.DefaultTokenServices;
+import org.springframework.security.oauth2.provider.token.TokenStore;
+import org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter;
+import org.springframework.security.oauth2.provider.token.store.JwtTokenStore;
+
+@Configuration
+@EnableAuthorizationServer
+public class AuthConfig extends AuthorizationServerConfigurerAdapter {
+
+    @Autowired
+    @Qualifier("authenticationManagerBean")
+    private AuthenticationManager authenticationManager;
+
+    @Override
+    public void configure(final AuthorizationServerSecurityConfigurer oauthServer) throws Exception {
+        oauthServer.tokenKeyAccess("permitAll()").checkTokenAccess("isAuthenticated()");
+    }
+
+    @Override
+    public void configure(final ClientDetailsServiceConfigurer clients)
+            throws Exception {// @formatter:off
+        clients.inMemory()
+                .withClient("fooClientIdPassword")
+                .secret(passwordEncoder().encode("secret"))
+                .authorizedGrantTypes("password", "authorization_code", "refresh_token", "client_credentials")
+                .scopes("foo", "read", "write")
+                .accessTokenValiditySeconds(3600) // 1 hour
+                .refreshTokenValiditySeconds(2592000); // 30 days
+    } // @formatter:on
+
+    @Bean
+    @Primary
+    public DefaultTokenServices tokenServices() {
+        final DefaultTokenServices defaultTokenServices = new DefaultTokenServices();
+        defaultTokenServices.setTokenStore(tokenStore());
+        defaultTokenServices.setSupportRefreshToken(true);
+        return defaultTokenServices;
+    }
+
+    @Override
+    public void configure(final AuthorizationServerEndpointsConfigurer endpoints) throws Exception {
+        endpoints.tokenStore(tokenStore())
+                .accessTokenConverter(accessTokenConverter())
+                .authenticationManager(authenticationManager);
+    }
+
+    @Bean
+    public TokenStore tokenStore() {
+        return new JwtTokenStore(accessTokenConverter());
+    }
+
+    @Bean
+    public JwtAccessTokenConverter accessTokenConverter() {
+        final JwtAccessTokenConverter converter = new JwtAccessTokenConverter();
+        converter.setSigningKey("123");
+        return converter;
+    }
+
+    @Bean
+    public BCryptPasswordEncoder passwordEncoder() {
+        return new BCryptPasswordEncoder();
+    }
+
+}
diff --git a/booking/src/main/java/hu/flow/booking/config/CustomUserDetailsService.java b/booking/src/main/java/hu/flow/booking/config/CustomUserDetailsService.java
new file mode 100644
index 0000000..5c31a3d
--- /dev/null
+++ b/booking/src/main/java/hu/flow/booking/config/CustomUserDetailsService.java
@@ -0,0 +1,24 @@
+package hu.flow.booking.config;
+
+import hu.flow.booking.repositories.UserRepository;
+import lombok.AllArgsConstructor;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.security.core.userdetails.UserDetails;
+import org.springframework.security.core.userdetails.UserDetailsService;
+import org.springframework.security.core.userdetails.UsernameNotFoundException;
+
+import javax.transaction.Transactional;
+
+@Configuration
+@Transactional
+@AllArgsConstructor
+public class CustomUserDetailsService implements UserDetailsService {
+
+    private UserRepository userRepository;
+
+    @Override
+    public UserDetails loadUserByUsername(String s) throws UsernameNotFoundException {
+        return userRepository.findFirstByUsername(s).orElseThrow(() -> new UsernameNotFoundException(s));
+    }
+
+}
diff --git a/booking/src/main/java/hu/flow/booking/config/MvcConfig.java b/booking/src/main/java/hu/flow/booking/config/MvcConfig.java
new file mode 100644
index 0000000..5cff874
--- /dev/null
+++ b/booking/src/main/java/hu/flow/booking/config/MvcConfig.java
@@ -0,0 +1,29 @@
+package hu.flow.booking.config;
+
+import org.springframework.context.annotation.Configuration;
+import org.springframework.core.Ordered;
+import org.springframework.core.annotation.Order;
+import org.springframework.stereotype.Component;
+import org.springframework.web.servlet.config.annotation.CorsRegistry;
+import org.springframework.web.servlet.config.annotation.EnableWebMvc;
+import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;
+
+import javax.servlet.*;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+import java.io.IOException;
+
+@Configuration
+@EnableWebMvc
+public class MvcConfig implements WebMvcConfigurer {
+
+  @Override
+  public void addCorsMappings(CorsRegistry registry) {
+    registry.addMapping("/**")
+        .allowedOrigins("*")
+        .allowedMethods("GET", "POST", "PUT", "DELETE", "OPTIONS", "HEAD")
+        .allowedHeaders("*")
+        .allowCredentials(true);
+  }
+
+}
diff --git a/booking/src/main/java/hu/flow/booking/config/RevokeTokenEndpoint.java b/booking/src/main/java/hu/flow/booking/config/RevokeTokenEndpoint.java
new file mode 100644
index 0000000..f649f5f
--- /dev/null
+++ b/booking/src/main/java/hu/flow/booking/config/RevokeTokenEndpoint.java
@@ -0,0 +1,34 @@
+package hu.flow.booking.config;
+
+import org.springframework.http.HttpStatus;
+import org.springframework.http.ResponseEntity;
+import org.springframework.security.oauth2.provider.endpoint.FrameworkEndpoint;
+import org.springframework.security.oauth2.provider.token.ConsumerTokenServices;
+import org.springframework.web.bind.annotation.DeleteMapping;
+import org.springframework.web.bind.annotation.ResponseBody;
+
+import javax.annotation.Resource;
+import javax.servlet.http.HttpServletRequest;
+
+@FrameworkEndpoint
+public class RevokeTokenEndpoint {
+
+  @Resource(name = "tokenServices")
+  private ConsumerTokenServices tokenServices;
+
+  @DeleteMapping("/oauth/token/revoke/")
+  @ResponseBody
+  public ResponseEntity<Void> revokeToken(HttpServletRequest request) {
+    String authorization = request.getHeader("Authorization");
+    if (authorization != null && authorization.contains("Bearer")) {
+      String tokenId = authorization.substring("Bearer".length() + 1);
+      if (tokenServices.revokeToken(tokenId)) {
+        return ResponseEntity.ok().build();
+      } else {
+        return ResponseEntity.status(HttpStatus.FORBIDDEN).build();
+      }
+    }
+    return ResponseEntity.noContent().build();
+  }
+
+}
diff --git a/booking/src/main/java/hu/flow/booking/config/SimpleCorsFilter.java b/booking/src/main/java/hu/flow/booking/config/SimpleCorsFilter.java
new file mode 100644
index 0000000..f89471c
--- /dev/null
+++ b/booking/src/main/java/hu/flow/booking/config/SimpleCorsFilter.java
@@ -0,0 +1,39 @@
+package hu.flow.booking.config;
+
+import org.springframework.core.Ordered;
+import org.springframework.core.annotation.Order;
+import org.springframework.stereotype.Component;
+
+import javax.servlet.*;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+import java.io.IOException;
+
+@Component
+@Order(Ordered.HIGHEST_PRECEDENCE)
+public class SimpleCorsFilter implements Filter {
+    public SimpleCorsFilter() {
+    }
+    @Override
+    public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain)
+            throws IOException, ServletException {
+        HttpServletResponse response = (HttpServletResponse) res;
+        HttpServletRequest request = (HttpServletRequest) req;
+        response.setHeader("Access-Control-Allow-Origin", "*");
+        response.setHeader("Access-Control-Allow-Methods", "POST, GET, OPTIONS, DELETE, PUT");
+        response.setHeader("Access-Control-Max-Age", "3600");
+        response
+                .setHeader("Access-Control-Allow-Headers", "x-requested-with, authorization, content-type");
+        if ("OPTIONS".equalsIgnoreCase(request.getMethod())) {
+            response.setStatus(HttpServletResponse.SC_OK);
+        } else {
+            chain.doFilter(req, res);
+        }
+    }
+    @Override
+    public void init(FilterConfig filterConfig) {
+    }
+    @Override
+    public void destroy() {
+    }
+}
diff --git a/booking/src/main/java/hu/flow/booking/config/WebSecurityConfig.java b/booking/src/main/java/hu/flow/booking/config/WebSecurityConfig.java
new file mode 100644
index 0000000..d605daf
--- /dev/null
+++ b/booking/src/main/java/hu/flow/booking/config/WebSecurityConfig.java
@@ -0,0 +1,57 @@
+package hu.flow.booking.config;
+
+import hu.flow.booking.models.User;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.http.HttpMethod;
+import org.springframework.security.authentication.AuthenticationManager;
+import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
+import org.springframework.security.config.annotation.web.builders.HttpSecurity;
+import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
+import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
+import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
+import org.springframework.security.oauth2.config.annotation.web.configuration.EnableResourceServer;
+import org.springframework.security.oauth2.config.annotation.web.configuration.ResourceServerConfigurer;
+import org.springframework.security.oauth2.config.annotation.web.configurers.ResourceServerSecurityConfigurer;
+
+@EnableWebSecurity
+@EnableResourceServer
+@Configuration
+public class WebSecurityConfig extends WebSecurityConfigurerAdapter implements ResourceServerConfigurer {
+
+    @Autowired
+    private BCryptPasswordEncoder passwordEncoder;
+
+    @Autowired
+    private CustomUserDetailsService userDetailsService;
+
+    @Override
+    protected void configure(AuthenticationManagerBuilder auth) throws Exception {
+        auth.userDetailsService(userDetailsService).passwordEncoder(passwordEncoder);
+    }
+
+    @Override
+    @Bean
+    public AuthenticationManager authenticationManagerBean() throws Exception {
+        return super.authenticationManagerBean();
+    }
+
+    @Override
+    public void configure(ResourceServerSecurityConfigurer resources) throws Exception {}
+
+    @Override
+    public void configure(final HttpSecurity http) throws Exception {
+        // @formatter:off
+        http.authorizeRequests()
+                .antMatchers("/", "/login", "/oauth/**", "/oauth/token/revokeById/**", "/tokens/**").permitAll()
+                .antMatchers(HttpMethod.POST,"/api/users").permitAll()
+                .antMatchers("/api/users", "/api/users/**").hasAnyAuthority(User.ROLE_USER)
+                .anyRequest().authenticated()
+                .and().formLogin().permitAll()
+                .and().csrf().disable()
+                .cors();
+        // @formatter:on
+    }
+
+}
diff --git a/booking/src/main/java/hu/flow/booking/models/User.java b/booking/src/main/java/hu/flow/booking/models/User.java
new file mode 100644
index 0000000..9dfe3fc
--- /dev/null
+++ b/booking/src/main/java/hu/flow/booking/models/User.java
@@ -0,0 +1,57 @@
+package hu.flow.booking.models;
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+import org.springframework.security.core.GrantedAuthority;
+import org.springframework.security.core.authority.SimpleGrantedAuthority;
+import org.springframework.security.core.userdetails.UserDetails;
+
+import javax.persistence.*;
+import java.util.Collection;
+import java.util.List;
+
+@Data
+@AllArgsConstructor
+@NoArgsConstructor
+@Builder
+@Entity
+@Table(name = "_user")
+public class User implements UserDetails {
+
+    public static final String ROLE_USER = "USER";
+
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
+    private Long id;
+
+    private String username;
+    private String password;
+    private final String role = ROLE_USER;
+
+    @Override
+    public Collection<? extends GrantedAuthority> getAuthorities() {
+        return List.of(new SimpleGrantedAuthority(this.role));
+    }
+
+    @Override
+    public boolean isAccountNonExpired() {
+        return true;
+    }
+
+    @Override
+    public boolean isAccountNonLocked() {
+        return true;
+    }
+
+    @Override
+    public boolean isCredentialsNonExpired() {
+        return true;
+    }
+
+    @Override
+    public boolean isEnabled() {
+        return true;
+    }
+}
diff --git a/booking/src/main/java/hu/flow/booking/repositories/UserRepository.java b/booking/src/main/java/hu/flow/booking/repositories/UserRepository.java
new file mode 100644
index 0000000..d2dac31
--- /dev/null
+++ b/booking/src/main/java/hu/flow/booking/repositories/UserRepository.java
@@ -0,0 +1,12 @@
+package hu.flow.booking.repositories;
+
+import hu.flow.booking.models.User;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.stereotype.Repository;
+
+import java.util.Optional;
+
+@Repository
+public interface UserRepository extends JpaRepository<User, Long> {
+    Optional<User> findFirstByUsername(String s);
+}
diff --git a/booking/src/main/java/hu/flow/booking/utils/InitDataLoader.java b/booking/src/main/java/hu/flow/booking/utils/InitDataLoader.java
new file mode 100644
index 0000000..f69e178
--- /dev/null
+++ b/booking/src/main/java/hu/flow/booking/utils/InitDataLoader.java
@@ -0,0 +1,28 @@
+package hu.flow.booking.utils;
+
+import hu.flow.booking.models.User;
+import hu.flow.booking.repositories.UserRepository;
+import lombok.AllArgsConstructor;
+import org.springframework.security.crypto.password.PasswordEncoder;
+import org.springframework.stereotype.Component;
+
+import javax.annotation.PostConstruct;
+import javax.transaction.Transactional;
+
+@Component
+@Transactional
+@AllArgsConstructor
+public class InitDataLoader {
+
+    private UserRepository userRepository;
+    private PasswordEncoder passwordEncoder;
+
+    @PostConstruct
+    public void init() {
+        loadUsers();
+    }
+
+    private void loadUsers() {
+        userRepository.save(User.builder().username("john").password(passwordEncoder.encode("password")).build());
+    }
+}
diff --git a/frontend/src/app/app.component.ts b/frontend/src/app/app.component.ts
index 9d6b2f1..5d81b02 100644
--- a/frontend/src/app/app.component.ts
+++ b/frontend/src/app/app.component.ts
@@ -1,4 +1,5 @@
-import { Component } from '@angular/core';
+import { Component, OnInit } from '@angular/core';
+import { AuthService } from './services/auth.service';
 
 @Component({
   selector: 'app-root',
@@ -6,5 +7,9 @@ import { Component } from '@angular/core';
   styleUrls: ['./app.component.css']
 })
 export class AppComponent {
+  
   title = 'frontend';
+
+  constructor() {
+  }
 }
diff --git a/frontend/src/app/app.module.ts b/frontend/src/app/app.module.ts
index 55fd086..5f62e2d 100644
--- a/frontend/src/app/app.module.ts
+++ b/frontend/src/app/app.module.ts
@@ -18,21 +18,21 @@ import { HotelComponent } from './hotel/hotel.component';
 import { BookingComponent } from './booking/booking.component';
 import { RoomComponent } from './room/room.component';
 import { GueatListComponent } from './guest/gueat-list/gueat-list.component';
-import { RouterModule, Routes} from '@angular/router';
+import { RouterModule, Routes } from '@angular/router';
 import { NewbookingComponent } from './booking/newbooking/newbooking.component';
-import {MatDatepickerModule} from '@angular/material/datepicker';
-import { FormsModule , ReactiveFormsModule} from '@angular/forms';
-import {MatNativeDateModule} from '@angular/material';
-import {MatAutocompleteModule} from '@angular/material/autocomplete';
+import { MatDatepickerModule } from '@angular/material/datepicker';
+import { FormsModule, ReactiveFormsModule } from '@angular/forms';
+import { MatNativeDateModule } from '@angular/material';
+import { MatAutocompleteModule } from '@angular/material/autocomplete';
 import { HttpClientModule } from '@angular/common/http';
-import {MatRadioModule} from '@angular/material/radio';
+import { MatRadioModule } from '@angular/material/radio';
+import { AuthGuard } from './services/auth-guard';
 
 
 const router: Routes = [
-
-  {path: "newbooking", component: NewbookingComponent},
-  
-
+  { path: '', redirectTo: 'login', pathMatch: 'full'},
+  { path: "login", component: LoginComponent },
+  { path: "newbooking", component: NewbookingComponent, canActivate: [AuthGuard] },
 ]
 
 @NgModule({
diff --git a/frontend/src/app/bar/bar.component.html b/frontend/src/app/bar/bar.component.html
index 2ec1f35..0fcbcae 100644
--- a/frontend/src/app/bar/bar.component.html
+++ b/frontend/src/app/bar/bar.component.html
@@ -1,30 +1,25 @@
 <mat-sidenav-container class="sidenav-container">
-  <mat-sidenav #drawer class="sidenav" fixedInViewport
-      [attr.role]="(isHandset$ | async) ? 'dialog' : 'navigation'"
-      [mode]="(isHandset$ | async) ? 'over' : 'side'"
-      [opened]="(isHandset$ | async) === false">
+  <mat-sidenav #drawer class="sidenav" fixedInViewport [attr.role]="(isHandset$ | async) ? 'dialog' : 'navigation'"
+    [mode]="(isHandset$ | async) ? 'over' : 'side'" [opened]="(isHandset$ | async) === false">
     <mat-toolbar>Opciók</mat-toolbar>
-    <mat-nav-list>
-      <a routerLink = "newbooking" mat-list-item href="#">Új foglalás</a>
-      <a mat-list-item href="#">Érkező</a>
-      <a mat-list-item href="#">Távozó</a>
+    <mat-nav-list *ngIf="isAuthenticated">
+      <a routerLink="newbooking" mat-list-item>Új foglalás</a>
+      <a routerLink="" mat-list-item >Érkező</a>
+      <a routerLink="" mat-list-item>Távozó</a>
     </mat-nav-list>
   </mat-sidenav>
   <mat-sidenav-content>
     <mat-toolbar color="primary">
-      <button
-        type="button"
-        aria-label="Toggle sidenav"
-        mat-icon-button
-        (click)="drawer.toggle()"
+      <button type="button" aria-label="Toggle sidenav" mat-icon-button (click)="drawer.toggle()"
         *ngIf="isHandset$ | async">
         <mat-icon aria-label="Side nav toggle icon">menu</mat-icon>
       </button>
       <span>Booking</span>
+      <span *ngIf="isAuthenticated" style="margin-left: 300px;" (click)="logout()">Logout</span>
     </mat-toolbar>
     <!-- Add Content Here -->
 
-      <router-outlet></router-outlet>
-    
+    <router-outlet></router-outlet>
+
   </mat-sidenav-content>
-</mat-sidenav-container>
+</mat-sidenav-container>
\ No newline at end of file
diff --git a/frontend/src/app/bar/bar.component.ts b/frontend/src/app/bar/bar.component.ts
index f2621b2..b441022 100644
--- a/frontend/src/app/bar/bar.component.ts
+++ b/frontend/src/app/bar/bar.component.ts
@@ -1,14 +1,17 @@
-import { Component } from '@angular/core';
+import { Component, OnInit } from '@angular/core';
 import { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';
 import { Observable } from 'rxjs';
 import { map, shareReplay } from 'rxjs/operators';
+import { AuthService } from '../services/auth.service';
 
 @Component({
   selector: 'app-bar',
   templateUrl: './bar.component.html',
   styleUrls: ['./bar.component.css']
 })
-export class BarComponent {
+export class BarComponent implements OnInit {
+
+  isAuthenticated: boolean;
 
   isHandset$: Observable<boolean> = this.breakpointObserver.observe(Breakpoints.Handset)
     .pipe(
@@ -16,6 +19,19 @@ export class BarComponent {
       shareReplay()
     );
 
-  constructor(private breakpointObserver: BreakpointObserver) {}
+  constructor(private breakpointObserver: BreakpointObserver, private auth: AuthService) {
+    this.auth.token.subscribe(token => {
+      this.isAuthenticated = !!token;
+    });
+  }
+
+
+  ngOnInit(): void {
+    this.auth.autoLogin();
+ }
+
+  logout() {
+    this.auth.logout();
+  }
 
 }
diff --git a/frontend/src/app/login/login.component.html b/frontend/src/app/login/login.component.html
index 6307559..d0f07d6 100644
--- a/frontend/src/app/login/login.component.html
+++ b/frontend/src/app/login/login.component.html
@@ -4,21 +4,25 @@
         Sign In
     </span>
 
+    <div>
+        <span style="color: red;" *ngIf="!!errorMessage">{{errorMessage}}</span>
+    </div>
+
     <div>
         <mat-form-field>
-            <input matInput type="text" name="username" placeholder="Username">
+            <input matInput type="text" name="username" placeholder="Username" [(ngModel)]="loginData.username">
         </mat-form-field>
     </div>
 
     <div>
         <mat-form-field>
-            <input matInput type="password" name="pass" placeholder="Password">
+            <input matInput type="password" name="pass" placeholder="Password" [(ngModel)]="loginData.password">
         </mat-form-field>
     </div>
 
 
     <div >
-        <button mat-raised-button color="primary">
+        <button mat-raised-button color="primary" (click)="login()">
             Sign in
         </button>
     </div>
diff --git a/frontend/src/app/login/login.component.ts b/frontend/src/app/login/login.component.ts
index a763753..f64bbc7 100644
--- a/frontend/src/app/login/login.component.ts
+++ b/frontend/src/app/login/login.component.ts
@@ -1,4 +1,6 @@
 import { Component, OnInit } from '@angular/core';
+import { AuthService } from '../services/auth.service';
+import { Router } from '@angular/router';
 
 
 @Component({
@@ -8,9 +10,28 @@ import { Component, OnInit } from '@angular/core';
 })
 export class LoginComponent implements OnInit {
 
-  constructor() { }
+  errorMessage: string;
+  loginData: {username: string, password: string} = {username: '', password: ''};
+
+  constructor(private auth: AuthService, private router: Router) { }
 
   ngOnInit() {
   }
 
+  login() {
+    this.auth.login(this.loginData.username, this.loginData.password).
+      subscribe(
+        () => {
+          this.router.navigate(['./newbooking']);
+        },
+        error => {
+          this.handleError(error);
+        },
+      );
+  }
+
+
+  private handleError(error: any) {
+    return (error.status === 400) ? this.errorMessage = 'Invalid username or password!' : '';
+  }
 }
diff --git a/frontend/src/app/services/auth-guard.ts b/frontend/src/app/services/auth-guard.ts
new file mode 100644
index 0000000..d0a034b
--- /dev/null
+++ b/frontend/src/app/services/auth-guard.ts
@@ -0,0 +1,25 @@
+import { CanActivate, ActivatedRoute, ActivatedRouteSnapshot, RouterStateSnapshot, Router, UrlTree } from '@angular/router';
+import { Injectable } from '@angular/core';
+import { Observable } from 'rxjs';
+import { AuthService } from './auth.service';
+import { map, take } from 'rxjs/operators';
+
+@Injectable({providedIn: 'root'})
+export class AuthGuard implements CanActivate {
+
+  constructor(private authService: AuthService, private router: Router) {}
+
+  canActivate(route: ActivatedRouteSnapshot, router: RouterStateSnapshot): boolean | Promise<boolean> | Observable<boolean | UrlTree> {
+
+    return this.authService.token.pipe(
+      take(1),
+      map(user => {
+      const isAuth = !!user;
+      if (isAuth) {
+        return true;
+      }
+      return this.router.createUrlTree(['./login']);
+    }));
+  }
+
+}
\ No newline at end of file
diff --git a/frontend/src/app/services/auth-interceptor.service.ts b/frontend/src/app/services/auth-interceptor.service.ts
new file mode 100644
index 0000000..ba742df
--- /dev/null
+++ b/frontend/src/app/services/auth-interceptor.service.ts
@@ -0,0 +1,27 @@
+import { HttpInterceptor, HttpRequest, HttpHandler, HttpHeaders } from '@angular/common/http';
+import { Injectable } from '@angular/core';
+import { AuthService } from './auth.service';
+import { take, exhaustMap } from 'rxjs/operators';
+
+@Injectable()
+export class AuthInterceptorService implements HttpInterceptor {
+
+  constructor(private authService: AuthService) {}
+
+  intercept(req: HttpRequest<any>, next: HttpHandler) {
+    return this.authService.token.pipe(
+      take(1),
+      exhaustMap(token => {
+        if (!token) {
+          return next.handle(req);
+        }
+        const headers = new HttpHeaders({
+          'Authorization': 'Bearer ' + token.access_token
+        });
+        const modifiedReq = req.clone({headers: headers})
+        console.log(modifiedReq);
+        return next.handle(modifiedReq);
+      })
+    )
+  }
+}
\ No newline at end of file
diff --git a/frontend/src/app/services/auth.service.ts b/frontend/src/app/services/auth.service.ts
new file mode 100644
index 0000000..ae3521f
--- /dev/null
+++ b/frontend/src/app/services/auth.service.ts
@@ -0,0 +1,164 @@
+import { Injectable } from '@angular/core';
+import {
+  HttpClient,
+  HttpHeaders,
+  HttpParams,
+  HttpErrorResponse
+} from '@angular/common/http';
+import { catchError, tap } from 'rxjs/operators';
+import { BehaviorSubject, throwError, Observable } from 'rxjs';
+import { Router } from '@angular/router';
+
+export interface AuthRegisterData {
+  username: string;
+  role: string;
+}
+
+@Injectable({ providedIn: 'root' })
+export class AuthService {
+  token = new BehaviorSubject<AuthToken>(null);
+  private tokenExpirationTime: any;
+  username: string;
+
+  constructor(private http: HttpClient, private router: Router) {}
+
+  user(): string {
+    return this.username;
+  }
+
+  login(username: string, password: string) {
+    const loginUrl = 'http://localhost:8080/oauth/token';
+    this.username = username;
+    const headers = new HttpHeaders({
+      'Content-Type': 'application/x-www-form-urlencoded',
+      Authorization: 'Basic ' + btoa('fooClientIdPassword:secret')
+    });
+
+    const body = new HttpParams()
+      .set('grant_type', 'password')
+      .set('username', username)
+      .set('password', password);
+
+    return this.http
+      .post<AuthToken>(loginUrl, body, { headers })
+      .pipe(
+        catchError(this.handleError),
+        tap(resData => this.getToken(resData))
+      );
+  }
+
+  public signUp(user: UserRegister) {
+    const registerUrl = 'http://localhost:8080/api/users';
+    const headers = new HttpHeaders({
+      'Content-Type': 'application/json'
+    });
+    const username = user.username;
+    const password = user.password;
+    const body = {
+      username,
+      password,
+    };
+    return this.http
+      .post<AuthRegisterData>(registerUrl, body, {
+        headers
+      })
+      .pipe(catchError(this.handleError));
+  }
+
+  autoLogin() {
+    console.log("autologin in progress");
+    
+    const tokenData: AuthToken = JSON.parse(localStorage.getItem('tokenData'));
+    if (!tokenData) {
+      return;
+    }
+
+    if (this.calcAuthToken(tokenData)) {
+      const expritationDuration =
+        new Date().getTime() + tokenData.expires_in - new Date().getTime();
+      this.token.next(tokenData);
+      // this.autoLogout(expritationDuration);
+    }
+  }
+
+  logout() {
+    this.token.next(null);
+    this.router.navigate(['/login']);
+    localStorage.removeItem('tokenData');
+    if (this.tokenExpirationTime) {
+      clearTimeout(this.tokenExpirationTime);
+    }
+    this.tokenExpirationTime = null;
+  }
+
+  getUser(): Observable<UserUpdate> {
+    const getUserUrl = 'http://localhost:8080/api/user';
+
+    const params = new HttpParams()
+    .set('email', this.username);
+
+    return this.http.get<UserUpdate>(getUserUrl, {params});
+  }
+
+  updateUser(user: UserUpdate) {
+    const getUserUrl = 'http://localhost:8080/api/user';
+
+    const params = new HttpParams()
+    .set('email', this.username);
+
+    return this.http.put(getUserUrl, user, {params});
+  }
+
+  // autoLogout(expirationDuration: number) {
+  //   console.log(expirationDuration);
+  //   this.tokenExpirationTime = setTimeout(() => {
+  //     this.logout();
+  //   }, expirationDuration);
+  // }
+
+  // convert/extract token
+  private getToken(token: AuthToken) {
+    this.token.next(token);
+    // this.autoLogout(token.expires_in * 1000);
+    localStorage.setItem('tokenData', JSON.stringify(token));
+  }
+
+  private handleError(errorResponse: HttpErrorResponse) {
+    const errorMessage = 'An error occured';
+    console.log(errorResponse);
+    return throwError(errorResponse);
+  }
+  private calcAuthToken(authToken: AuthToken) {
+    let now = new Date();
+    let result = now.setSeconds(now.getSeconds() + 3600);
+    let moment = new Date().getTime();
+    if (!authToken.expires_in || moment > result) {
+      return null;
+    }
+    return authToken.access_token;
+  }
+}
+
+class AuthToken {
+   constructor(
+    public access_token: string,
+    public token_type: string,
+    public refresh_token: string,
+    public expires_in: number,
+    public scope: string,
+    public jti: string
+  ) {}
+
+}
+
+class UserRegister {
+  constructor(
+    public username: string,
+    public password: number
+  ) {}
+}
+
+class UserUpdate {
+  username: string;
+  password?: string;
+}
